//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/dthurn/Dropbox/firebase/objc-test/ca/thurn/testing/SharedTestCase.java
//
//  Created by dthurn on 12/8/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "SharedTestCase.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Iterable.h"
#include "java/lang/Runnable.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Random.h"
#include "java/util/Set.h"
#include "java/util/Timer.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "junit/framework/Assert.h"
#include "org/junit/runner/JUnitCore.h"
#import "TRVSMonitor.h"
TRVSMonitor *global_trvs_monitor;

@implementation CaThurnTestingSharedTestCase

- (NSString *)getJavascriptModuleName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (void)runMainWithNSString:(NSString *)name {
  [OrgJunitRunnerJUnitCore mainWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ name } count:1 type:[IOSClass classWithClass:[NSString class]]]];
}

- (void)setUp {
  [self beginAsyncTestBlock];
  id<JavaLangRunnable> runFinished = [[CaThurnTestingSharedTestCase_OneTimeRunnable alloc] initWithJavaLangRunnable:[[CaThurnTestingSharedTestCase_$1 alloc] initWithCaThurnTestingSharedTestCase:self]];
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(didSetUpTestCase_)) getAndSetWithBoolean:YES] == NO) {
    id<JavaLangRunnable> runSetUp = [[CaThurnTestingSharedTestCase_OneTimeRunnable alloc] initWithJavaLangRunnable:[[CaThurnTestingSharedTestCase_$2 alloc] initWithCaThurnTestingSharedTestCase:self withJavaLangRunnable:runFinished]];
    [self sharedSetUpTestCaseWithJavaLangRunnable:runSetUp];
  }
  else {
    [self sharedSetUpWithJavaLangRunnable:runFinished];
  }
  [self endAsyncTestBlock];
}

- (void)tearDown {
  [self sharedTearDown];
}

- (void)sharedSetUpTestCaseWithJavaLangRunnable:(id<JavaLangRunnable>)done {
  [((id<JavaLangRunnable>) nil_chk(done)) run];
}

- (void)sharedSetUpWithJavaLangRunnable:(id<JavaLangRunnable>)done {
  [((id<JavaLangRunnable>) nil_chk(done)) run];
}

- (void)sharedTearDown {
}

- (void)injectScriptWithNSString:(NSString *)url
            withJavaLangRunnable:(id<JavaLangRunnable>)onComplete {
  if (onComplete != nil) {
    [onComplete run];
  }
}

- (void)beginAsyncTestBlock {
  [self beginAsyncTestBlockWithInt:1];
}

- (void)beginAsyncTestBlockWithInt:(int)numFinishesExpected {
  global_trvs_monitor = [[TRVSMonitor alloc] initWithExpectedSignalCount:1];
}

- (void)endAsyncTestBlock {
  BOOL signaled = [global_trvs_monitor waitWithTimeout: 10.0];
  if (!signaled) {
    [JunitFrameworkAssert failWithNSString: @"test timed out"];
  }
}

- (CaThurnTestingSharedTestCase_TestModeEnum *)getTestMode {
  return [CaThurnTestingSharedTestCase_TestModeEnum OBJECTIVE_C];
}

- (void)finished {
  [global_trvs_monitor signal];
}

- (void)scheduleWithInt:(int)delayMillis
   withJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  [((JavaUtilTimer *) [[JavaUtilTimer alloc] init]) scheduleWithJavaUtilTimerTask:[[CaThurnTestingSharedTestCase_$3 alloc] initWithJavaLangRunnable:runnable] withLong:delayMillis];
}

- (int)randomInteger {
  return [((JavaUtilRandom *) [[JavaUtilRandom alloc] init]) nextInt];
}

- (void)assertDeepEqualsWithId:(id)o1
                        withId:(id)o2 {
  [self assertDeepEqualsWithNSString:@"(no message)" withId:o1 withId:o2];
}

- (void)assertDeepEqualsWithNSString:(NSString *)msg
                              withId:(id)o1
                              withId:(id)o2 {
  if ([o1 conformsToProtocol: @protocol(JavaLangIterable)] && [o2 conformsToProtocol: @protocol(JavaLangIterable)]) {
    id<JavaUtilIterator> ite1 = [((id<JavaLangIterable>) nil_chk(o1)) iterator];
    id<JavaUtilIterator> ite2 = [((id<JavaLangIterable>) nil_chk(o2)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(ite1)) hasNext] && [((id<JavaUtilIterator>) nil_chk(ite2)) hasNext]) {
      [self assertDeepEqualsWithNSString:msg withId:[ite1 next] withId:[((id<JavaUtilIterator>) nil_chk(ite2)) next]];
    }
    [JunitFrameworkAssert assertFalseWithNSString:@"Iterable sizes differ" withBoolean:[ite1 hasNext] || [((id<JavaUtilIterator>) nil_chk(ite2)) hasNext]];
  }
  else if ([o1 conformsToProtocol: @protocol(JavaUtilMap)] && [o2 conformsToProtocol: @protocol(JavaUtilMap)]) {
    id<JavaUtilMap> map1 = (id<JavaUtilMap>) check_protocol_cast(o1, @protocol(JavaUtilMap));
    id<JavaUtilMap> map2 = (id<JavaUtilMap>) check_protocol_cast(o2, @protocol(JavaUtilMap));
    [JunitFrameworkAssert assertEqualsWithNSString:@"Map sizes differ" withInt:[((id<JavaUtilMap>) nil_chk(map1)) size] withInt:[((id<JavaUtilMap>) nil_chk(map2)) size]];
    for (id<JavaUtilMap_Entry> __strong entry in [map1 entrySet]) {
      [JunitFrameworkAssert assertTrueWithBoolean:[map2 containsKeyWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey]]];
      [self assertDeepEqualsWithNSString:msg withId:[entry getValue] withId:[map2 getWithId:[entry getKey]]];
    }
  }
  else {
    [JunitFrameworkAssert assertEqualsWithNSString:msg withId:o1 withId:o2];
  }
}

- (id)init {
  if (self = [super init]) {
    didSetUpTestCase_ = [[JavaUtilConcurrentAtomicAtomicBoolean alloc] initWithBoolean:NO];
  }
  return self;
}

- (void)copyAllFieldsTo:(CaThurnTestingSharedTestCase *)other {
  [super copyAllFieldsTo:other];
  other->didSetUpTestCase_ = didSetUpTestCase_;
}

@end

static CaThurnTestingSharedTestCase_TestModeEnum *CaThurnTestingSharedTestCase_TestModeEnum_JAVA;
static CaThurnTestingSharedTestCase_TestModeEnum *CaThurnTestingSharedTestCase_TestModeEnum_JAVASCRIPT;
static CaThurnTestingSharedTestCase_TestModeEnum *CaThurnTestingSharedTestCase_TestModeEnum_OBJECTIVE_C;
IOSObjectArray *CaThurnTestingSharedTestCase_TestModeEnum_values;

@implementation CaThurnTestingSharedTestCase_TestModeEnum

+ (CaThurnTestingSharedTestCase_TestModeEnum *)JAVA {
  return CaThurnTestingSharedTestCase_TestModeEnum_JAVA;
}
+ (CaThurnTestingSharedTestCase_TestModeEnum *)JAVASCRIPT {
  return CaThurnTestingSharedTestCase_TestModeEnum_JAVASCRIPT;
}
+ (CaThurnTestingSharedTestCase_TestModeEnum *)OBJECTIVE_C {
  return CaThurnTestingSharedTestCase_TestModeEnum_OBJECTIVE_C;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

- (id)initWithNSString:(NSString *)__name withInt:(int)__ordinal {
  return [super initWithNSString:__name withInt:__ordinal];
}

+ (void)initialize {
  if (self == [CaThurnTestingSharedTestCase_TestModeEnum class]) {
    CaThurnTestingSharedTestCase_TestModeEnum_JAVA = [[CaThurnTestingSharedTestCase_TestModeEnum alloc] initWithNSString:@"JAVA" withInt:0];
    CaThurnTestingSharedTestCase_TestModeEnum_JAVASCRIPT = [[CaThurnTestingSharedTestCase_TestModeEnum alloc] initWithNSString:@"JAVASCRIPT" withInt:1];
    CaThurnTestingSharedTestCase_TestModeEnum_OBJECTIVE_C = [[CaThurnTestingSharedTestCase_TestModeEnum alloc] initWithNSString:@"OBJECTIVE_C" withInt:2];
    CaThurnTestingSharedTestCase_TestModeEnum_values = [[IOSObjectArray alloc] initWithObjects:(id[]){ CaThurnTestingSharedTestCase_TestModeEnum_JAVA, CaThurnTestingSharedTestCase_TestModeEnum_JAVASCRIPT, CaThurnTestingSharedTestCase_TestModeEnum_OBJECTIVE_C, nil } count:3 type:[IOSClass classWithClass:[CaThurnTestingSharedTestCase_TestModeEnum class]]];
  }
}

+ (IOSObjectArray *)values {
  return [IOSObjectArray arrayWithArray:CaThurnTestingSharedTestCase_TestModeEnum_values];
}

+ (CaThurnTestingSharedTestCase_TestModeEnum *)valueOfWithNSString:(NSString *)name {
  for (int i = 0; i < [CaThurnTestingSharedTestCase_TestModeEnum_values count]; i++) {
    CaThurnTestingSharedTestCase_TestModeEnum *e = CaThurnTestingSharedTestCase_TestModeEnum_values->buffer_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

@end
@implementation CaThurnTestingSharedTestCase_OneTimeRunnable

- (id)initWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  if (self = [super init]) {
    ran_ = [[JavaUtilConcurrentAtomicAtomicBoolean alloc] initWithBoolean:NO];
    self->runnable_ = runnable;
  }
  return self;
}

- (void)run {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(ran_)) getAndSetWithBoolean:YES] == NO) {
    [((id<JavaLangRunnable>) nil_chk(runnable_)) run];
  }
}

- (void)copyAllFieldsTo:(CaThurnTestingSharedTestCase_OneTimeRunnable *)other {
  [super copyAllFieldsTo:other];
  other->ran_ = ran_;
  other->runnable_ = runnable_;
}

@end
@implementation CaThurnTestingSharedTestCase_BooleanReference

- (id)initWithBoolean:(BOOL)value {
  if (self = [super init]) {
    self->value_ = [[JavaUtilConcurrentAtomicAtomicBoolean alloc] initWithBoolean:value];
  }
  return self;
}

- (void)setWithBoolean:(BOOL)newValue {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(value_)) setWithBoolean:newValue];
}

- (BOOL)get {
  return [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(value_)) get];
}

- (BOOL)getAndSetWithBoolean:(BOOL)newValue {
  return [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(value_)) getAndSetWithBoolean:newValue];
}

- (void)copyAllFieldsTo:(CaThurnTestingSharedTestCase_BooleanReference *)other {
  [super copyAllFieldsTo:other];
  other->value_ = value_;
}

@end
@implementation CaThurnTestingSharedTestCase_IntegerReference

- (id)initWithInt:(int)value {
  if (self = [super init]) {
    self->value_ = [[JavaUtilConcurrentAtomicAtomicInteger alloc] initWithInt:value];
  }
  return self;
}

- (void)setWithInt:(int)newValue {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(value_)) setWithInt:newValue];
}

- (int)get {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(value_)) get];
}

- (int)getAndSetWithInt:(int)newValue {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(value_)) getAndSetWithInt:newValue];
}

- (int)getAndIncrement {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(value_)) getAndIncrement];
}

- (void)copyAllFieldsTo:(CaThurnTestingSharedTestCase_IntegerReference *)other {
  [super copyAllFieldsTo:other];
  other->value_ = value_;
}

@end
@implementation CaThurnTestingSharedTestCase_$1

- (void)run {
  [this$0_ finished];
}

- (id)initWithCaThurnTestingSharedTestCase:(CaThurnTestingSharedTestCase *)outer$ {
  this$0_ = outer$;
  return [super init];
}

@end
@implementation CaThurnTestingSharedTestCase_$2

- (void)run {
  [this$0_ sharedSetUpWithJavaLangRunnable:val$runFinished_];
}

- (id)initWithCaThurnTestingSharedTestCase:(CaThurnTestingSharedTestCase *)outer$
withJavaLangRunnable:(id<JavaLangRunnable>)capture$0 {
  this$0_ = outer$;
  val$runFinished_ = capture$0;
  return [super init];
}

@end
@implementation CaThurnTestingSharedTestCase_$3

- (void)run {
  [((id<JavaLangRunnable>) nil_chk(val$runnable_)) run];
}

- (id)initWithJavaLangRunnable:(id<JavaLangRunnable>)capture$0 {
  val$runnable_ = capture$0;
  return [super init];
}

@end
